{"ast":null,"code":"import { authAPI } from \"../api/authApi\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  login: null,\n  email: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, login, email) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      id,\n      login,\n      email\n    }\n  };\n};\nexport const getLoginThunkCreator = userId => {\n  return dispatch => {\n    authAPI.follow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = response.data.data;\n        this.props.setAuthUserData(id, login, email);\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/stoocom/Desktop/Geekbrains/Project/Kamasutra/social_network/src/redux/authReducer.js"],"names":["authAPI","SET_USER_DATA","initialState","id","login","email","isAuth","authReducer","state","action","type","data","setAuthUserData","getLoginThunkCreator","userId","dispatch","follow","then","response","resultCode","props"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAsB;AACjD,SAAO;AAAEK,IAAAA,IAAI,EAAET,aAAR;AAAuBU,IAAAA,IAAI,EAAE;AAACR,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA;AAAZ;AAA7B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMQ,oBAAoB,GAAIC,MAAD,IAAY;AAC5C,SAAOC,QAAQ,IAAI;AACff,IAAAA,OAAO,CAACgB,MAAR,CAAeF,MAAf,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACP,IAAT,CAAcQ,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAAChB,UAAAA,EAAD;AAAKC,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAsBa,QAAQ,CAACP,IAAT,CAAcA,IAAxC;AACA,aAAKS,KAAL,CAAWR,eAAX,CAA2BT,EAA3B,EAA+BC,KAA/B,EAAsCC,KAAtC;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAYP,eAAeE,WAAf","sourcesContent":["import { authAPI } from \"../api/authApi\"\n\nconst SET_USER_DATA = 'SET_USER_DATA'\n\nlet initialState = {\n    id: null,\n    login: null,\n    email: null,\n    isAuth: false,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true,\n            }\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (id, login, email) => {\n    return { type: SET_USER_DATA, data: {id, login, email} }\n}\n\nexport const getLoginThunkCreator = (userId) => {\n    return dispatch => {\n        authAPI.follow(userId)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, login, email } = response.data.data\n                    this.props.setAuthUserData(id, login, email)\n                }\n            })\n    }\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}