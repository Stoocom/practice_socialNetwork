{"ast":null,"code":"import { authAPI } from \"../api/authApi\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nlet initialState = {\n  id: null,\n  login: null,\n  email: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data //isAuth: action.data.isAuth,\n\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, login, email, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      id,\n      login,\n      email,\n      isAuth\n    }\n  };\n};\nexport const getLoginThunkCreator = () => async dispatch => {\n  let response = await authAPI.getLogin();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, login, email, true));\n  }\n};\nexport const loginThunkCreator = (email, password, rememberMe) => async dispatch => {\n  // let action = stopSubmit(\"login\", {_error: \"Email is wrong\"})\n  // dispatch(action)\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getLoginThunkCreator());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    let action = stopSubmit(\"login\", {\n      _error: message\n    });\n    dispatch(action);\n  }\n};\nexport const logoutThunkCreator = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/stoocom/Desktop/Geekbrains/Project/Kamasutra/practice_socialNetwork/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","login","email","isAuth","authReducer","state","action","type","data","setAuthUserData","getLoginThunkCreator","dispatch","response","getLogin","resultCode","loginThunkCreator","password","rememberMe","message","messages","length","_error","logoutThunkCreator","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,oBAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP,CAGH;;AAHG,OAAP;;AAKJ;AACI,aAAOH,KAAP;AATR;AAWH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,KAA8B;AACzD,SAAO;AAAEI,IAAAA,IAAI,EAAET,aAAR;AAAuBU,IAAAA,IAAI,EAAE;AAAER,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA;AAApB;AAA7B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMO,oBAAoB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC1D,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,QAAR,EAArB;;AACA,MAAID,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAAEd,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA;AAAb,QAAuBU,QAAQ,CAACJ,IAAT,CAAcA,IAAzC;AACAG,IAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,CANM;AASP,OAAO,MAAMa,iBAAiB,GAAG,CAACb,KAAD,EAAQc,QAAR,EAAkBC,UAAlB,KAAiC,MAAON,QAAP,IAAoB;AAElF;AACA;AACA,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACK,KAAR,CAAcC,KAAd,EAAqBc,QAArB,EAA+BC,UAA/B,CAArB;;AACA,MAAIL,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,IAAAA,QAAQ,CAACD,oBAAoB,EAArB,CAAR;AACH,GAFD,MAEO;AACH,QAAIQ,OAAO,GAAGN,QAAQ,CAACJ,IAAT,CAAcW,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACJ,IAAT,CAAcW,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACA,QAAIb,MAAM,GAAGT,UAAU,CAAC,OAAD,EAAU;AAAEwB,MAAAA,MAAM,EAAEH;AAAV,KAAV,CAAvB;AACAP,IAAAA,QAAQ,CAACL,MAAD,CAAR;AACH;AACJ,CAZM;AAcP,OAAO,MAAMgB,kBAAkB,GAAG,MAAM,MAAOX,QAAP,IAAoB;AACxD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC2B,MAAR,EAArB;;AACA,MAAIX,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,CALM;AAQP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../api/authApi\"\nimport { stopSubmit } from \"redux-form\"\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA'\n\nlet initialState = {\n    id: null,\n    login: null,\n    email: null,\n    isAuth: false,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                //isAuth: action.data.isAuth,\n            }\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (id, login, email, isAuth) => {\n    return { type: SET_USER_DATA, data: { id, login, email, isAuth } }\n}\n\nexport const getLoginThunkCreator = () => async (dispatch) => {\n    let response = await authAPI.getLogin()\n    if (response.data.resultCode === 0) {\n        let { id, login, email } = response.data.data\n        dispatch(setAuthUserData(id, login, email, true))\n    }\n}\n\n\nexport const loginThunkCreator = (email, password, rememberMe) => async (dispatch) => {\n\n    // let action = stopSubmit(\"login\", {_error: \"Email is wrong\"})\n    // dispatch(action)\n    let response = await authAPI.login(email, password, rememberMe)\n    if (response.data.resultCode === 0) {\n        dispatch(getLoginThunkCreator())\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n        let action = stopSubmit(\"login\", { _error: message })\n        dispatch(action)\n    }\n}\n\nexport const logoutThunkCreator = () => async (dispatch) => {\n    let response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n}\n\n\nexport default authReducer"]},"metadata":{},"sourceType":"module"}