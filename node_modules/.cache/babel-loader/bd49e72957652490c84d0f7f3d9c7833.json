{"ast":null,"code":"import { authAPI } from \"../api/authApi\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  login: null,\n  email: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data //isAuth: action.data.isAuth,\n\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, login, email, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      id,\n      login,\n      email,\n      isAuth\n    }\n  };\n};\nexport const getLoginThunkCreator = () => {\n  return dispatch => {\n    authAPI.getLogin().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = response.data.data;\n        dispatch(setAuthUserData(id, login, email, true));\n      }\n    });\n  };\n};\nexport const loginThunkCreator = (email, password, rememberMe) => dispatch => {\n  // let action = stopSubmit(\"login\", {_error: \"Email is wrong\"})\n  // dispatch(action)\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getLoginThunkCreator());\n    } else {\n      let message = responce.data.meddages.length > 0 ? response.data.message[0] : \"\";\n      let action = stopSubmit(\"login\", {\n        email: \"Email is wrong\"\n      });\n      dispatch(action);\n    }\n  });\n};\nexport const logoutThunkCreator = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/stoocom/Desktop/Geekbrains/Project/Kamasutra/social_network/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","login","email","isAuth","authReducer","state","action","console","log","type","data","setAuthUserData","getLoginThunkCreator","dispatch","getLogin","then","response","resultCode","loginThunkCreator","password","rememberMe","message","responce","meddages","length","logoutThunkCreator","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AAEI,SAAKX,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACI,IAFP,CAGH;;AAHG,OAAP;;AAKJ;AACI,aAAOL,KAAP;AATR;AAWH,CAbD;;AAeA,OAAO,MAAMM,eAAe,GAAG,CAACX,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,KAA8B;AACzD,SAAO;AAAEM,IAAAA,IAAI,EAAEX,aAAR;AAAuBY,IAAAA,IAAI,EAAE;AAACV,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB;AAA7B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMS,oBAAoB,GAAG,MAAM;AACtC,SAAOC,QAAQ,IAAI;AACfjB,IAAAA,OAAO,CAACkB,QAAR,GACKC,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACjB,UAAAA,EAAD;AAAKC,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAsBc,QAAQ,CAACN,IAAT,CAAcA,IAAxC;AACAG,QAAAA,QAAQ,CAACF,eAAe,CAACX,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAWP,OAAO,MAAMgB,iBAAiB,GAAG,CAAChB,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAE5E;AACA;AACIjB,EAAAA,OAAO,CAACK,KAAR,CAAcC,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACD,oBAAoB,EAArB,CAAR;AACH,KAFD,MAEO;AACH,UAAIS,OAAO,GAAGC,QAAQ,CAACZ,IAAT,CAAca,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACN,IAAT,CAAcW,OAAd,CAAsB,CAAtB,CAApC,GAA+D,EAA7E;AACA,UAAIf,MAAM,GAAGT,UAAU,CAAC,OAAD,EAAU;AAACK,QAAAA,KAAK,EAAE;AAAR,OAAV,CAAvB;AACAW,MAAAA,QAAQ,CAACP,MAAD,CAAR;AACH;AACJ,GATL;AAUH,CAdE;AAgBP,OAAO,MAAMmB,kBAAkB,GAAG,MAAOZ,QAAD,IAAc;AAC9CjB,EAAAA,OAAO,CAAC8B,MAAR,GACKX,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACP;AACR,GALG;AAMP,CAPM;AAUP,eAAeP,WAAf","sourcesContent":["import { authAPI } from \"../api/authApi\"\nimport { stopSubmit } from \"redux-form\"\n\nconst SET_USER_DATA = 'SET_USER_DATA'\n\nlet initialState = {\n    id: null,\n    login: null,\n    email: null,\n    isAuth: false,\n}\n\nconst authReducer = (state = initialState, action) => {\n    console.log(action)\n    switch (action.type) {\n\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                //isAuth: action.data.isAuth,\n            }\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (id, login, email, isAuth) => {\n    return { type: SET_USER_DATA, data: {id, login, email, isAuth} }\n}\n\nexport const getLoginThunkCreator = () => {\n    return dispatch => {\n        authAPI.getLogin()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, login, email } = response.data.data\n                    dispatch(setAuthUserData(id, login, email, true))\n                }\n            })\n    }\n}\nexport const loginThunkCreator = (email, password, rememberMe) => (dispatch) => {\n\n    // let action = stopSubmit(\"login\", {_error: \"Email is wrong\"})\n    // dispatch(action)\n        authAPI.login(email, password, rememberMe)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getLoginThunkCreator())\n                } else {\n                    let message = responce.data.meddages.length > 0 ? response.data.message[0] : \"\"\n                    let action = stopSubmit(\"login\", {email: \"Email is wrong\"})\n                    dispatch(action)\n                }\n            })\n    }\n\nexport const logoutThunkCreator = () => (dispatch) => {\n        authAPI.logout()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData(null, null, null, false))\n            }\n    })\n}\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}