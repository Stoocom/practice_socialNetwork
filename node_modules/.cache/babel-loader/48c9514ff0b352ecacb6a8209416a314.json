{"ast":null,"code":"var _jsxFileName = \"/Users/stoocom/Desktop/Geekbrains/Project/Kamasutra/social_network/src/components/Users/UsersContainer.jsx\";\nimport { connect } from 'react-redux';\nimport { follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsersThunkCreator } from '../../redux/usersReducer';\nimport Users from './Users.jsx';\nimport axios from 'axios';\nimport React from 'react';\nimport Loader from '../common/Preloader/Loader';\nimport { getUsers, getPageSize, getTotalCount, getCurrentPage, getIsLoading, getFollowingInProgress } from '../../redux/user-selectors';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.unFollow = id => {\n      this.props.unfollow(id);\n    };\n\n    this.onPageChanged = pageNumber => {\n      this.props.getUsers(pageNumber, this.props.pageSize); // this.props.setLoading(true)\n      // this.props.setCurrentPage(pageNumber)\n      // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n      //         this.props.setLoading(false)\n      //         this.props.setUsers(data.items)\n      //     })\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUsers(this.props.currentPage, this.props.pageSize); // this.props.setLoading(true)\n    // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n    //         this.props.setLoading(false)\n    //         this.props.setUsers(data.items)\n    //         this.props.setTotalCount(data.totalCount / 300)\n    // })\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isLoading ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Users, {\n      totalCount: this.props.totalCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      toggleFollowingProgress: this.props.toggleFollowingProgress,\n      followingInProgress: this.props.followingInProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // let mapStateToProps = (state) => {\n//     return {\n//         users: state.usersPage.users,\n//         pageSize: state.usersPage.pageSize,\n//         totalCount: state.usersPage.totalCount,\n//         currentPage: state.usersPage.currentPage,\n//         isLoading: state.usersPage.isLoading,\n//         followingInProgress: state.usersPage.followingInProgress,\n//     }\n// }\n\n\nlet mapStateToProps = state => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalCount: getTotalCount(state),\n    currentPage: getCurrentPage(state),\n    isLoading: getIsLoading(state),\n    followingInProgress: getFollowingInProgress(state)\n  };\n};\n\nconst UsersMainContainer = connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setCurrentPage,\n  toggleFollowingProgress,\n  getUsers: getUsersThunkCreator\n})(UsersContainer);\nexport default UsersMainContainer;","map":{"version":3,"sources":["/Users/stoocom/Desktop/Geekbrains/Project/Kamasutra/social_network/src/components/Users/UsersContainer.jsx"],"names":["connect","follow","unfollow","setCurrentPage","toggleFollowingProgress","getUsersThunkCreator","Users","axios","React","Loader","getUsers","getPageSize","getTotalCount","getCurrentPage","getIsLoading","getFollowingInProgress","UsersContainer","Component","unFollow","id","props","onPageChanged","pageNumber","pageSize","componentDidMount","currentPage","render","isLoading","totalCount","users","followingInProgress","mapStateToProps","state","UsersMainContainer"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,cAA3B,EAA2CC,uBAA3C,EAAoEC,oBAApE,QAAgG,0BAAhG;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,QAAT,EAAkBC,WAAlB,EAA+BC,aAA/B,EAA8CC,cAA9C,EAA8DC,YAA9D,EAA4EC,sBAA5E,QAA0G,4BAA1G;;AAEA,MAAMC,cAAN,SAA6BR,KAAK,CAACS,SAAnC,CAA6C;AAAA;AAAA;;AAAA,SACzCC,QADyC,GAC7BC,EAAD,IAAQ;AACf,WAAKC,KAAL,CAAWlB,QAAX,CAAoBiB,EAApB;AACH,KAHwC;;AAAA,SAczCE,aAdyC,GAcxBC,UAAD,IAAgB;AAC5B,WAAKF,KAAL,CAAWV,QAAX,CAAoBY,UAApB,EAAgC,KAAKF,KAAL,CAAWG,QAA3C,EAD4B,CAE5B;AACA;AACA;AACA;AACA;AACA;AACH,KAtBwC;AAAA;;AAIzCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,KAAL,CAAWV,QAAX,CAAoB,KAAKU,KAAL,CAAWK,WAA/B,EAA4C,KAAKL,KAAL,CAAWG,QAAvD,EADgB,CAEhB;AACA;AACA;AACA;AACA;AACA;AACH;;AAYDG,EAAAA,MAAM,GAAG;AAEL,wBACI,0CACK,KAAKN,KAAL,CAAWO,SAAX,gBAAuB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,gBACD,oBAAC,KAAD;AACI,MAAA,UAAU,EAAE,KAAKP,KAAL,CAAWQ,UAD3B;AAEI,MAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWG,QAFzB;AAGI,MAAA,WAAW,EAAE,KAAKH,KAAL,CAAWK,WAH5B;AAII,MAAA,aAAa,EAAE,KAAKJ,aAJxB;AAKI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWS,KALtB;AAMI,MAAA,MAAM,EAAE,KAAKT,KAAL,CAAWnB,MANvB;AAOI,MAAA,QAAQ,EAAE,KAAKmB,KAAL,CAAWlB,QAPzB;AAQI,MAAA,uBAAuB,EAAE,KAAKkB,KAAL,CAAWhB,uBARxC;AASI,MAAA,mBAAmB,EAAE,KAAKgB,KAAL,CAAWU,mBATpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAiBH;;AA3CwC,C,CA8C7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHH,IAAAA,KAAK,EAAEnB,QAAQ,CAACsB,KAAD,CADZ;AAEHT,IAAAA,QAAQ,EAAEZ,WAAW,CAACqB,KAAD,CAFlB;AAGHJ,IAAAA,UAAU,EAAEhB,aAAa,CAACoB,KAAD,CAHtB;AAIHP,IAAAA,WAAW,EAAEZ,cAAc,CAACmB,KAAD,CAJxB;AAKHL,IAAAA,SAAS,EAAEb,YAAY,CAACkB,KAAD,CALpB;AAMHF,IAAAA,mBAAmB,EAAEf,sBAAsB,CAACiB,KAAD;AANxC,GAAP;AAQH,CATD;;AAWA,MAAMC,kBAAkB,GAAGjC,OAAO,CAAC+B,eAAD,EAAkB;AAChD9B,EAAAA,MADgD;AACxCC,EAAAA,QADwC;AAC9BC,EAAAA,cAD8B;AACdC,EAAAA,uBADc;AAEhDM,EAAAA,QAAQ,EAAEL;AAFsC,CAAlB,CAAP,CAGxBW,cAHwB,CAA3B;AAKA,eAAeiB,kBAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsersThunkCreator } from '../../redux/usersReducer';\nimport Users from './Users.jsx'\nimport axios from 'axios'\nimport React from 'react'\nimport Loader from '../common/Preloader/Loader'\nimport { getUsers,getPageSize, getTotalCount, getCurrentPage, getIsLoading, getFollowingInProgress } from '../../redux/user-selectors';\n\nclass UsersContainer extends React.Component {\n    unFollow = (id) => {\n        this.props.unfollow(id)\n    }\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n        // this.props.setLoading(true)\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n        //         this.props.setLoading(false)\n        //         this.props.setUsers(data.items)\n        //         this.props.setTotalCount(data.totalCount / 300)\n        // })\n    }\n\n    onPageChanged = (pageNumber) => {\n        this.props.getUsers(pageNumber, this.props.pageSize)\n        // this.props.setLoading(true)\n        // this.props.setCurrentPage(pageNumber)\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n        //         this.props.setLoading(false)\n        //         this.props.setUsers(data.items)\n        //     })\n    }\n    \n    render() {\n\n        return (\n            <>\n                {this.props.isLoading ? <Loader/> :\n                <Users\n                    totalCount={this.props.totalCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    onPageChanged={this.onPageChanged}\n                    users={this.props.users}\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n                    toggleFollowingProgress={this.props.toggleFollowingProgress}\n                    followingInProgress={this.props.followingInProgress}\n                />\n        }\n            </>\n        )\n    }\n}\n\n// let mapStateToProps = (state) => {\n//     return {\n//         users: state.usersPage.users,\n//         pageSize: state.usersPage.pageSize,\n//         totalCount: state.usersPage.totalCount,\n//         currentPage: state.usersPage.currentPage,\n//         isLoading: state.usersPage.isLoading,\n//         followingInProgress: state.usersPage.followingInProgress,\n//     }\n// }\nlet mapStateToProps = (state) => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalCount: getTotalCount(state),\n        currentPage: getCurrentPage(state),\n        isLoading: getIsLoading(state),\n        followingInProgress: getFollowingInProgress(state),\n    }\n}\n\nconst UsersMainContainer = connect(mapStateToProps, {\n    follow, unfollow, setCurrentPage, toggleFollowingProgress, \n    getUsers: getUsersThunkCreator\n})(UsersContainer)\n\nexport default UsersMainContainer"]},"metadata":{},"sourceType":"module"}