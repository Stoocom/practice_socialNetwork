{"ast":null,"code":"import { authAPI } from \"../api/authApi\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  login: null,\n  email: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data //isAuth: action.data.isAuth,\n\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, login, email, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      id,\n      login,\n      email,\n      isAuth\n    }\n  };\n};\nexport const getLoginThunkCreator = () => dispatch => {\n  return authAPI.getLogin().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, login, email, true));\n    }\n  });\n};\nexport const loginThunkCreator = (email, password, rememberMe) => dispatch => {\n  // let action = stopSubmit(\"login\", {_error: \"Email is wrong\"})\n  // dispatch(action)\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getLoginThunkCreator());\n    } else {\n      console.log(response.data);\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n      let action = stopSubmit(\"login\", {\n        _error: message\n      });\n      dispatch(action);\n    }\n  });\n};\nexport const logoutThunkCreator = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/stoocom/Desktop/Geekbrains/Project/Kamasutra/social_network/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","login","email","isAuth","authReducer","state","action","type","data","setAuthUserData","getLoginThunkCreator","dispatch","getLogin","then","response","resultCode","loginThunkCreator","password","rememberMe","console","log","message","messages","length","_error","logoutThunkCreator","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP,CAGH;;AAHG,OAAP;;AAKJ;AACI,aAAOH,KAAP;AATR;AAWH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,KAA8B;AACzD,SAAO;AAAEI,IAAAA,IAAI,EAAET,aAAR;AAAuBU,IAAAA,IAAI,EAAE;AAAER,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA;AAApB;AAA7B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMO,oBAAoB,GAAG,MAAMC,QAAQ,IAAI;AAClD,SAAOf,OAAO,CAACgB,QAAR,GACFC,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAAEf,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaC,QAAAA;AAAb,UAAuBY,QAAQ,CAACN,IAAT,CAAcA,IAAzC;AACAG,MAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GANE,CAAP;AAOH,CARM;AAWP,OAAO,MAAMc,iBAAiB,GAAG,CAACd,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAE5E;AACA;AACAf,EAAAA,OAAO,CAACK,KAAR,CAAcC,KAAd,EAAqBe,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACD,oBAAoB,EAArB,CAAR;AACH,KAFD,MAEO;AACHS,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACN,IAArB;AACA,UAAIa,OAAO,GAAGP,QAAQ,CAACN,IAAT,CAAcc,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCT,QAAQ,CAACN,IAAT,CAAcc,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACA,UAAIhB,MAAM,GAAGT,UAAU,CAAC,OAAD,EAAU;AAAE2B,QAAAA,MAAM,EAAEH;AAAV,OAAV,CAAvB;AACAV,MAAAA,QAAQ,CAACL,MAAD,CAAR;AACH;AACJ,GAVL;AAWH,CAfM;AAiBP,OAAO,MAAMmB,kBAAkB,GAAG,MAAOd,QAAD,IAAc;AAClDf,EAAAA,OAAO,CAAC8B,MAAR,GACKb,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AAUP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../api/authApi\"\nimport { stopSubmit } from \"redux-form\"\n\nconst SET_USER_DATA = 'SET_USER_DATA'\n\nlet initialState = {\n    id: null,\n    login: null,\n    email: null,\n    isAuth: false,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                //isAuth: action.data.isAuth,\n            }\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (id, login, email, isAuth) => {\n    return { type: SET_USER_DATA, data: { id, login, email, isAuth } }\n}\n\nexport const getLoginThunkCreator = () => dispatch => {\n    return authAPI.getLogin()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                let { id, login, email } = response.data.data\n                dispatch(setAuthUserData(id, login, email, true))\n            }\n        })\n}\n\n\nexport const loginThunkCreator = (email, password, rememberMe) => (dispatch) => {\n\n    // let action = stopSubmit(\"login\", {_error: \"Email is wrong\"})\n    // dispatch(action)\n    authAPI.login(email, password, rememberMe)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(getLoginThunkCreator())\n            } else {\n                console.log(response.data)\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n                let action = stopSubmit(\"login\", { _error: message })\n                dispatch(action)\n            }\n        })\n}\n\nexport const logoutThunkCreator = () => (dispatch) => {\n    authAPI.logout()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false))\n            }\n        })\n}\n\n\nexport default authReducer"]},"metadata":{},"sourceType":"module"}